/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-04-02 06:18:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.onedaybacking;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class addItemProc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
 request.setCharacterEncoding("UTF-8");
      out.write('\r');
      out.write('\n');
      onedaybaking.additemMgr iMgr = null;
      iMgr = (onedaybaking.additemMgr) _jspx_page_context.getAttribute("iMgr", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (iMgr == null){
        iMgr = new onedaybaking.additemMgr();
        _jspx_page_context.setAttribute("iMgr", iMgr, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      onedaybaking.additemBean iBean = null;
      iBean = (onedaybaking.additemBean) _jspx_page_context.getAttribute("iBean", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (iBean == null){
        iBean = new onedaybaking.additemBean();
        _jspx_page_context.setAttribute("iBean", iBean, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      onedaybaking.CateBean caBean = null;
      caBean = (onedaybaking.CateBean) _jspx_page_context.getAttribute("caBean", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (caBean == null){
        caBean = new onedaybaking.CateBean();
        _jspx_page_context.setAttribute("caBean", caBean, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      onedaybaking.OptionBean oBean = null;
      oBean = (onedaybaking.OptionBean) _jspx_page_context.getAttribute("oBean", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (oBean == null){
        oBean = new onedaybaking.OptionBean();
        _jspx_page_context.setAttribute("oBean", oBean, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("iBean"), request);
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("caBean"), request);
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("oBean"), request);
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>강의등록</title>\r\n");
      out.write("<link href=\"yeounsu.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("<style>\r\n");
      out.write("  /* 화면 전체를 덮는 배경 */\r\n");
      out.write("  .overlay {\r\n");
      out.write("    display: none;\r\n");
      out.write("    position: fixed;\r\n");
      out.write("    top: 0;\r\n");
      out.write("    left: 0;\r\n");
      out.write("    width: 100%;\r\n");
      out.write("    height: 100%;\r\n");
      out.write("    background-color: rgba(0, 0, 0, 0.5); /* 투명도 조절 */\r\n");
      out.write("    z-index: 1000; /* 다른 요소들 위에 나타나도록 설정 */\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  /* 안내창을 띄우는 박스 */\r\n");
      out.write("  .modal {\r\n");
      out.write("    display: none;\r\n");
      out.write("    position: fixed;\r\n");
      out.write("    top: 50%;\r\n");
      out.write("    left: 50%;\r\n");
      out.write("    transform: translate(-50%, -50%);\r\n");
      out.write("    background-color: white;\r\n");
      out.write("    padding: 20px;\r\n");
      out.write("    border-radius: 5px;\r\n");
      out.write("    z-index: 1001; /* 다른 요소들 위에 나타나도록 설정 */\r\n");
      out.write("  }\r\n");
      out.write("</style>\r\n");
      out.write("<html>\r\n");
      out.write("<body bgcolor=\"#FFFFCC\">\r\n");
      out.write("<br/><br/>\r\n");
      out.write("<div align=\"center\">\r\n");
      out.write("    <div class=\"button-container2\">\r\n");
      out.write("        <!-- 저장하기 버튼에 showModal() 함수를 연결 -->\r\n");
      out.write("        <input class=\"custom-button\" type=\"button\" value=\"저장하기\" onclick=\"showModal()\">\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- 배경과 안내창 -->\r\n");
      out.write("<div class=\"overlay\" id=\"overlay\"></div>\r\n");
      out.write("<div class=\"modal\" id=\"modal\">\r\n");
      out.write("    <!-- 모달 창 내용 수정 -->\r\n");
      out.write("    <h2>저장 중...</h2>\r\n");
      out.write("    <!-- 저장 중임을 안내하는 내용 추가 -->\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("function showModal() {\r\n");
      out.write("    // 저장 중 모달 창 표시\r\n");
      out.write("    document.getElementById(\"overlay\").style.display = \"block\";\r\n");
      out.write("    document.getElementById(\"modal\").style.display = \"block\";\r\n");
      out.write("\r\n");
      out.write("    // 여기에 저장 작업을 수행하는 코드 추가\r\n");
      out.write("    // 저장 작업이 완료되면 closeModal() 함수를 호출하여 모달 창을 닫음\r\n");
      out.write("    // 여기서는 단순히 2초 후에 모달 창을 닫도록 설정\r\n");
      out.write("    setTimeout(closeModal, 2000);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function closeModal() {\r\n");
      out.write("    // 모달 창 닫기\r\n");
      out.write("    document.getElementById(\"overlay\").style.display = \"none\";\r\n");
      out.write("    document.getElementById(\"modal\").style.display = \"none\";\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
