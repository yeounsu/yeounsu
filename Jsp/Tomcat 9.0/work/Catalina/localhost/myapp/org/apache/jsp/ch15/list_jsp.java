/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-03-14 08:38:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch15;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import ch15.UtilMgr;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(1);
    _jspx_imports_classes.add("ch15.UtilMgr");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      ch15.BoardMgr mgr = null;
      mgr = (ch15.BoardMgr) _jspx_page_context.getAttribute("mgr", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (mgr == null){
        mgr = new ch15.BoardMgr();
        _jspx_page_context.setAttribute("mgr", mgr, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      ch15.BCommentMgr cmgr = null;
      cmgr = (ch15.BCommentMgr) _jspx_page_context.getAttribute("cmgr", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (cmgr == null){
        cmgr = new ch15.BCommentMgr();
        _jspx_page_context.setAttribute("cmgr", cmgr, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\r\n");
      out.write("\r\n");

    int totalRecord = 0;
    int numPerPage = 10;
    int pagePerBlock = 15;
    int totalPage = 0;
    int totalBlock = 0;
    int nowPage = 1;
    int nowBlock = 1;
    
    // 요청된 numPerPage 처리
    if(request.getParameter("numPerPage") != null){
        numPerPage = UtilMgr.parseInt(request, "numPerPage");
    }
    
    // 검색에 필요한 변수
    String keyField = ""; // name, subject, content
    String keyWord = "";
    if(request.getParameter("keyWord") != null){
        keyField = request.getParameter("keyField");
        keyWord = request.getParameter("keyWord");
    }
    
    if(request.getParameter("reload") != null &&
            request.getParameter("reload").equals("true")){
        keyField = "";
        keyWord = "";
    }
    
    totalRecord = mgr.getTotalCount(keyField, keyWord);
    
    int start = (nowPage * numPerPage) - numPerPage;
    int cnt = numPerPage;
    
    // 전체 페이지 개수
    totalPage = (int)Math.ceil((double)totalRecord / numPerPage);
    // 전체 블럭 개수
    totalBlock = (int)Math.ceil((double)totalPage / pagePerBlock);
    // 현재 블럭
    nowBlock = (int)Math.ceil((double)nowPage / pagePerBlock);

      out.write("\r\n");
      out.write("<tr align=\"center\"></tr>\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>JSP Board</title>\r\n");
      out.write("    <link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("        function check() {\r\n");
      out.write("            if(document.searchFrm.keyWord.value == \"\"){\r\n");
      out.write("                alert(\"검색어를 입력하세요.\");\r\n");
      out.write("                document.searchFrm.keyWord.focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            document.searchFrm.submit();\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        function list() {\r\n");
      out.write("            document.listFrm.action = \"list.jsp\";\r\n");
      out.write("            document.listFrm.submit();\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        function pageing(page) {\r\n");
      out.write("            document.readFrm.nowPage.value = page;\r\n");
      out.write("            document.readFrm.submit();\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        function block(block) {\r\n");
      out.write("            document.readFrm.nowPage.value = (block - 1) * ");
      out.print(pagePerBlock);
      out.write(" + 1;\r\n");
      out.write("            document.readFrm.submit();\r\n");
      out.write("        }\r\n");
      out.write("        function read(num) {\r\n");
      out.write("            document.readFrm.num.value = num;\r\n");
      out.write("            document.readFrm.acrion=\"read.jsp\";\r\n");
      out.write("            document.readFrm.submit();\r\n");
      out.write("        }\r\n");
      out.write("        function numPerFn(numPerPage){\r\n");
      out.write("        	document.readFrm.action = \"list.jsp\";\r\n");
      out.write("        	document.readFrm.numPerPage.value = numPerPage;\r\n");
      out.write("        	document.readFrm.submit();\r\n");
      out.write("        	\r\n");
      out.write("        }\r\n");
      out.write("    	function cDel(cnum) {\r\n");
      out.write("    		document.cFrm.cnum.value=cnum;\r\n");
      out.write("    		document.cFrm.flag.value=\"delete\";\r\n");
      out.write("    		document.cFrm.submit();\r\n");
      out.write("    	}\r\n");
      out.write("    \r\n");
      out.write("        </script>\r\n");
      out.write("    \r\n");
      out.write("</head>\r\n");
      out.write("   <form name=\"readFrm\">\r\n");
      out.write("            <input type=\"hidden\" name=\"totalRecord\" value=\"");
      out.print(totalRecord);
      out.write("\">\r\n");
      out.write("            <input type=\"hidden\" name=\"numPerPage\" value=\"");
      out.print(numPerPage);
      out.write("\">\r\n");
      out.write("            <input type=\"hidden\" name=\"keyField\" value=\"");
      out.print(keyField);
      out.write("\">\r\n");
      out.write("            <input type=\"hidden\" name=\"keyWord\" value=\"");
      out.print(keyWord);
      out.write("\">\r\n");
      out.write("            <input type=\"hidden\" name=\"num\">\r\n");
      out.write("        </form>\r\n");
      out.write("        <form name=\"readFrm\">\r\n");
      out.write("            <input type=\"hidden\" name=\"totalRecord\" value=\"");
      out.print(totalRecord);
      out.write("\">\r\n");
      out.write("            <input type=\"hidden\" name=\"numPerPage\" value=\"");
      out.print(numPerPage);
      out.write("\">\r\n");
      out.write("            <input type=\"hidden\" name=\"keyField\" value=\"");
      out.print(keyField);
      out.write("\">\r\n");
      out.write("            <input type=\"hidden\" name=\"keyWord\" value=\"");
      out.print(keyWord);
      out.write("\">\r\n");
      out.write("            <input type=\"hidden\" name=\"num\">\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("<body bgcolor=\"#FFFFCC\">\r\n");
      out.write("    <div align=\"center\"><br/>\r\n");
      out.write("        <h2>JSP Board</h2><br/>\r\n");
      out.write("       \r\n");
      out.write("   \r\n");
      out.write("    \r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
